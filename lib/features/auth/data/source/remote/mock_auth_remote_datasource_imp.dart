////********** AUTOGENERATED FILE: DO NOT REMOVE ANY COMMENT IN THIS STYLE **********////
////********** START IMPORTS **********////
import 'package:transport_management/features/auth/domain/data/auth_remote_datasource.dart';
import 'package:transport_management/features/auth/domain/usecases/current_user.dart';
import 'package:transport_management/features/auth/domain/usecases/delete_user.dart';
import 'package:transport_management/features/auth/domain/usecases/get_vehicle_models.dart';
import 'package:transport_management/features/auth/domain/usecases/initiate_reset_password_verification.dart';
import 'package:transport_management/features/auth/domain/usecases/initiate_verification.dart';
import 'package:transport_management/features/auth/domain/usecases/login_driver.dart';
import 'package:transport_management/features/auth/domain/usecases/register_driver.dart';
import 'package:transport_management/features/auth/domain/usecases/reset_password.dart';
import 'package:transport_management/features/auth/domain/usecases/update_profile.dart';
import 'package:transport_management/features/auth/domain/usecases/verify_otp.dart';
import 'package:transport_management/helpers/network_call_helper/network_call_helper.dart';
import 'package:logger/logger.dart';
////********** END IMPORTS **********////

class MockAuthRemoteDataSourceImp implements AuthRemoteDataSource {
  final Logger _logger;
  final NetworkCallHelper _networkCallHelper;

  MockAuthRemoteDataSourceImp({
    required Logger logger,
    required NetworkCallHelper networkCallHelper,
  })  : _logger = logger,
        _networkCallHelper = networkCallHelper;

////********** START METHODS **********////

  @override
  Future<CurrentUserUsecaseOutput> currentUser(
      CurrentUserUsecaseInput input) async {
    throw UnimplementedError();
  }

  @override
  Future<DeleteUserUsecaseOutput> deleteUser(DeleteUserUsecaseInput input) {
    // TODO: implement deleteUser
    throw UnimplementedError();
  }

  @override
  Future<LoginDriverUsecaseOutput> login(LoginDriverUsecaseInput input) async {
    Future<void>.delayed(const Duration(seconds: 1));
    return LoginDriverUsecaseOutput(token: '1234');
  }

  @override
  Future<RegisterDriverUsecaseOutput> register(
      RegisterDriverUsecaseInput input) async {
    throw UnimplementedError();
  }

  @override
  Future<ResetPasswordUsecaseOutput> resetPassword(
      ResetPasswordUsecaseInput input) {
    // TODO: implement resetPassword
    throw UnimplementedError();
  }

  @override
  Future<VerifyOtpUsecaseOutput> verifyOtp(VerifyOtpUsecaseInput input) {
    // TODO: implement verifyOtp
    throw UnimplementedError();
  }

  @override
  Future<InitiateVerificationUsecaseOutput> initiateVerification(
      InitiateVerificationUsecaseInput input) {
    // TODO: implement initiateVerification
    throw UnimplementedError();
  }

  @override
  Future<GetVehicleModelsUsecaseOutput> getVehicleModels(
      GetVehicleModelsUsecaseInput input) {
    // TODO: implement getVehicleModels
    throw UnimplementedError();
  }

  @override
  Future<InitiateResetPasswordVerificationUsecaseOutput>
      resetPasswordInitiateVerification(
          InitiateResetPasswordVerificationUsecaseInput input) {
    // TODO: implement resetPasswordInitiateVerification
    throw UnimplementedError();
  }

  @override
  Future<UpdateProfileUsecaseOutput> updateProfile(
      UpdateProfileUsecaseInput input) {
    // TODO: implement updateProfile
    throw UnimplementedError();
  }

////********** END METHODS **********////
}
