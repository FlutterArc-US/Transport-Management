////********** AUTOGENERATED FILE: DO NOT REMOVE ANY COMMENT IN THIS STYLE **********////
////********** START IMPORTS **********////
import 'package:injectable/injectable.dart';
import 'package:transport_management/features/auth/domain/data/auth_local_datasource.dart';
import 'package:transport_management/features/auth/domain/data/auth_remote_datasource.dart';
import 'package:transport_management/features/auth/domain/repository/auth_repository.dart';
import 'package:transport_management/features/auth/domain/usecases/current_user.dart';
import 'package:transport_management/features/auth/domain/usecases/delete_auth.dart';
import 'package:transport_management/features/auth/domain/usecases/delete_user.dart';
import 'package:transport_management/features/auth/domain/usecases/get_auth.dart';
import 'package:transport_management/features/auth/domain/usecases/get_vehicle_models.dart';
import 'package:transport_management/features/auth/domain/usecases/initiate_reset_password_verification.dart';
import 'package:transport_management/features/auth/domain/usecases/initiate_verification.dart';
import 'package:transport_management/features/auth/domain/usecases/login_driver.dart';
import 'package:transport_management/features/auth/domain/usecases/register_driver.dart';
import 'package:transport_management/features/auth/domain/usecases/reset_password.dart';
import 'package:transport_management/features/auth/domain/usecases/save_auth.dart';
import 'package:transport_management/features/auth/domain/usecases/update_profile.dart';
import 'package:transport_management/features/auth/domain/usecases/verify_otp.dart';
////********** END IMPORTS **********////

@LazySingleton(as: AuthRepository)
class AuthRepositoryImp implements AuthRepository {
////********** START VARIABLES **********////
  final AuthRemoteDataSource _authRemoteDataSource;
  final AuthLocalDataSource _authLocalDataSource;
////********** END VARIABLES **********////

  AuthRepositoryImp({
////********** START RECEIVE VALUES **********////
    required AuthRemoteDataSource authRemoteDataSource,
    required AuthLocalDataSource authLocalDataSource,
////********** END RECEIVE VALUES **********////
  })  :
////********** START SET VALUES **********////
        _authRemoteDataSource = authRemoteDataSource,
        _authLocalDataSource = authLocalDataSource
////********** END SET VALUES **********////
  ;

////********** START METHODS **********////
  /// [LoginDriverUsecaseInput] is received to [login] method as parameter
  /// [LoginDriverUsecaseOutput] is returned from [login] method
  @override
  Future<LoginDriverUsecaseOutput> login(LoginDriverUsecaseInput input) async {
    return _authRemoteDataSource.login(input);
  }

  /// [RegisterDriverUsecaseInput] is received to [register] method as parameter
  /// [RegisterDriverUsecaseOutput] is returned from [register] method
  @override
  Future<RegisterDriverUsecaseOutput> register(
      RegisterDriverUsecaseInput input) async {
    return _authRemoteDataSource.register(input);
  }

  /// [SaveAuthUsecaseInput] is received to [saveAuth] method as parameter
  /// [SaveAuthUsecaseOutput] is returned from [saveAuth] method
  @override
  Future<SaveAuthUsecaseOutput> saveAuth(SaveAuthUsecaseInput input) async {
    return _authLocalDataSource.saveAuth(input);
  }

  /// [GetAuthUsecaseInput] is received to [getAuth] method as parameter
  /// [GetAuthUsecaseOutput] is returned from [getAuth] method
  @override
  Future<GetAuthUsecaseOutput> getAuth(GetAuthUsecaseInput input) async {
    return _authLocalDataSource.getAuth(input);
  }

  /// [DeleteAuthUsecaseInput] is received to [deleteAuth] method as parameter
  /// [DeleteAuthUsecaseOutput] is returned from [deleteAuth] method
  @override
  Future<DeleteAuthUsecaseOutput> deleteAuth(
      DeleteAuthUsecaseInput input) async {
    return _authLocalDataSource.deleteAuth(input);
  }

  /// [CurrentUserUsecaseInput] is received to [currentUser] method as parameter
  /// [CurrentUserUsecaseOutput] is returned from [currentUser] method
  @override
  Future<CurrentUserUsecaseOutput> currentUser(
      CurrentUserUsecaseInput input) async {
    return _authRemoteDataSource.currentUser(input);
  }

  /// [DeleteUserUsecaseInput] is received to [deleteUser] method as parameter
  /// [DeleteUserUsecaseOutput] is returned from [deleteUser] method
  @override
  Future<DeleteUserUsecaseOutput> deleteUser(
      DeleteUserUsecaseInput input) async {
    return _authRemoteDataSource.deleteUser(input);
  }

  /// [ResetPasswordUsecaseInput] is received to [resetPassword] method as parameter
  /// [ResetPasswordUsecaseOutput] is returned from [resetPassword] method
  @override
  Future<ResetPasswordUsecaseOutput> resetPassword(
      ResetPasswordUsecaseInput input) async {
    return _authRemoteDataSource.resetPassword(input);
  }

  @override
  Future<UpdateProfileUsecaseOutput> updateProfile(
      UpdateProfileUsecaseInput input) async {
    return _authRemoteDataSource.updateProfile(input);
  }

  @override
  Future<VerifyOtpUsecaseOutput> verifyOtp(VerifyOtpUsecaseInput input) {
    return _authRemoteDataSource.verifyOtp(input);
  }

  @override
  Future<InitiateVerificationUsecaseOutput> initiateVerification(
      InitiateVerificationUsecaseInput input) {
    return _authRemoteDataSource.initiateVerification(input);
  }

  @override
  Future<GetVehicleModelsUsecaseOutput> getVehicleModels(
      GetVehicleModelsUsecaseInput input) {
    return _authRemoteDataSource.getVehicleModels(input);
  }

  @override
  Future<InitiateResetPasswordVerificationUsecaseOutput>
      resetPasswordInitiateVerification(
          InitiateResetPasswordVerificationUsecaseInput input) {
    return _authRemoteDataSource.resetPasswordInitiateVerification(input);
  }

////********** END METHODS **********////
}
